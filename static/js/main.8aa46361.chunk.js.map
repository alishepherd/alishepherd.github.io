{"version":3,"sources":["logo.svg","components/Navbar.js","components/TitleBlock.js","components/Subtitle.js","components/Masthead.js","components/MockeryBlock.js","components/MockeryBlockColumn.js","components/ContactPain.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","TitleBlock","props","titleBlock","Subtitle","subtitle","Masthead","MockeryBlock","children","MockeryBlockColumn","headerImage","src","heading","text","ContactPain","Footer","App","style","padding","fontWeight","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,sNCU5BC,MARf,WACE,OACE,yBAAKC,UAAU,Y,MCOJC,MARf,SAAoBC,GAClB,OACE,yBAAKF,UAAU,cACZE,EAAMC,a,MCKEC,MARf,SAAkBF,GAChB,OACE,yBAAKF,UAAU,YACZE,EAAMG,WCQEC,MAVf,WACE,OACE,yBAAKN,UAAU,YACb,kBAAC,EAAD,CAAYG,WAAW,2BACvB,6BACA,kBAAC,EAAD,CAAUE,SAAS,4C,MCEVE,MARf,SAAsBL,GACpB,OACE,yBAAKF,UAAU,gBACZE,EAAMM,W,MCWEC,MAdf,SAA4BP,GAC1B,OACE,yBAAKF,UAAU,sBACZE,EAAMQ,aAAe,yBAAKV,UAAU,oBAAoBW,IAAKT,EAAMQ,cACpE,yBAAKV,UAAU,uBACdE,EAAMU,SAEP,yBAAKZ,UAAU,oBACZE,EAAMW,Q,MCAAC,MARf,WACE,OACE,yBAAKd,UAAU,eAAf,uC,MCMWe,MARf,WACE,OACE,yBAAKf,UAAU,UAAf,qGCuCWgB,MAjCf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,yBAAKiB,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,SAAS,SAC5D,kBAAC,EAAD,CAAUf,SAAS,wCAErB,6BACA,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAoBO,QAAQ,OAAOC,KAAK,4BAA4BH,YAAY,qBAChF,kBAAC,EAAD,CAAoBE,QAAQ,MAAMC,KAAK,6BAA6BH,YAAY,oBAChF,kBAAC,EAAD,CAAoBE,QAAQ,QAAQC,KAAK,oGAAoGH,YAAY,uBAE3J,6BACA,yBAAKO,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,SAAU,SAC7D,kBAAC,EAAD,CAAUf,SAAS,uCAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAoBO,QAAQ,qBAAWC,KAAK,uCAC5C,kBAAC,EAAD,CAAoBD,QAAQ,sBAAYC,KAAK,kDAC7C,kBAAC,EAAD,CAAoBD,QAAQ,sBAAYC,KAAK,qCAC7C,kBAAC,EAAD,CAAoBD,QAAQ,wBAAcC,KAAK,+EAEjD,kBAAC,EAAD,MACA,kBAAC,EAAD,QC3BcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8aa46361.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      \n    </div>\n  );\n}\n\nexport default Navbar;","import React from 'react';\nimport './TitleBlock.css'; \n\nfunction TitleBlock(props) {\n  return (\n    <div className=\"TitleBlock\">\n      {props.titleBlock}\n    </div>\n  );\n}\n\nexport default TitleBlock;","import React from 'react';\nimport \"./Subtitle.css\";\n\nfunction Subtitle(props) {\n  return (\n    <div className=\"Subtitle\">\n      {props.subtitle}\n    </div>\n  );\n}\n\nexport default Subtitle;","import React from 'react';\nimport TitleBlock from \"./TitleBlock\";\nimport Subtitle from \"./Subtitle\";\n\nfunction Masthead() {\n  return (\n    <div className=\"Masthead\">\n      <TitleBlock titleBlock=\"HEYALI SOLUTIONS UNLTD\"/>\n      <hr/>\n      <Subtitle subtitle=\"Sell the dream, deliver the nightmare\" />\n    </div>\n  );\n}\n\nexport default Masthead;","import React from 'react';\nimport \"./MockeryBlock.css\"\n\nfunction MockeryBlock(props) {\n  return (\n    <div className=\"MockeryBlock\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default MockeryBlock;","import React from 'react';\nimport \"./MockeryBlockColumn.css\"\n\nfunction MockeryBlockColumn(props) {\n  return (\n    <div className=\"MockeryBlockColumn\">\n      {props.headerImage && <img className=\"MockeryBlockImage\" src={props.headerImage} />}\n      <div className=\"MockeryBlockHeading\">\n      {props.heading}\n      </div>\n      <div className=\"MockeryBlockText\">\n        {props.text}\n        </div>\n    </div>\n  );\n}\n\nexport default MockeryBlockColumn;","import React from 'react';\nimport \"./ContactPain.css\"\n\nfunction ContactPain() {\n  return (\n    <div className=\"ContactPain\">\n      Don't contact me, I'll contact you\n    </div>\n  );\n}\n\nexport default ContactPain;","import React from 'react';\nimport \"./Footer.css\"\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      HeyAli Solutions Unltd is not a registered company, but if it was, it would be company number 1. \n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport Masthead from \"./components/Masthead\"\nimport MockeryBlock from \"./components/MockeryBlock\"\nimport MockeryBlockColumn from \"./components/MockeryBlockColumn\"\nimport ContactPain from \"./components/ContactPain\"\nimport Footer from \"./components/Footer\"\nimport Subtitle from \"./components/Subtitle\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <header className=\"App-header\">\n        <Masthead />\n      </header>\n      <div style={{ padding: '50px', fontWeight: 'bolder', fontSize:'30px'}} >\n        <Subtitle subtitle=\"Do the bare minimum you have to do\" />\n      </div>\n      <hr />\n      <MockeryBlock>\n\n        <MockeryBlockColumn heading=\"HTML\" text=\"I do some stuff with HTML\" headerImage=\"/img/HTMLimg.png\" />\n        <MockeryBlockColumn heading=\"CSS\" text=\"I'm your gal for CSS stuff\" headerImage=\"/img/CSSimg.png\" />\n        <MockeryBlockColumn heading=\"React\" text=\"Why did the child component have such great self-esteem? Because its parent kept giving it props!\" headerImage=\"/img/REACTimg.png\" />\n      </MockeryBlock>\n      <hr />\n      <div style={{ padding: '50px', fontWeight: 'bolder', fontSize: '30px'}} >\n        <Subtitle subtitle=\"Here's what I bring to the table:\" />\n      </div>\n      <MockeryBlock>\n        <MockeryBlockColumn heading=\"Hiring💁\" text=\"I can hire people to do this stuff\" />\n        <MockeryBlockColumn heading=\"Sarcasm😏\" text=\"A real sense of humour brought to any project\" />\n        <MockeryBlockColumn heading=\"11x Dev🤓\" text=\"Even better than a 10x Developer\" />\n        <MockeryBlockColumn heading=\"Spark Joy💥\" text=\"Do what sparks joy in your life, leave the rest to HeyAli Solutions Unltd\" />\n      </MockeryBlock>\n      <ContactPain />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}